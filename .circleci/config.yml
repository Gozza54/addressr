version: 2.1
orbs:
  queue: eddiewebb/queue@1.5.0
jobs:
  deps:
    docker:
      - image: circleci/node:12.11.0
    steps:
      - checkout

      - restore_cache:
          keys:
            - dependencies-{{ checksum "package.json" }}
            - dependencies-
      - run:
          name: npm install
          command: |
            npm install
      - save_cache:
          paths:
            - node_modules
          key: dependencies-{{ checksum "package.json" }}

  test:
    docker:
      - image: circleci/node:12.11.0
      - image: elasticsearch:7.14.2
        environment:
          'discovery.type': 'single-node'
          'bootstrap.system_call_filter': 'false'
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "package.json" }}
            - dependencies-
            - gnaf
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          command: |
            set +x
            npm install
            ./node_modules/.bin/wait-port -t 600000 localhost:9200
            ./node_modules/.bin/wait-port -t 600000 http://localhost:9200/_cluster/health?wait_for_status=green
            export ES_STARTED=1
            npm run genversion
            npm run check-licenses
            npm run cover:nodejs:nogeo
            npm run cover:rest:nogeo
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: test-results
      - save_cache:
          paths:
            - target/gnaf
          key: gnaf

  test-cli:
    docker:
      - image: circleci/node:12.11.0
      - image: elasticsearch:7.14.2
        environment:
          'discovery.type': 'single-node'
          'bootstrap.system_call_filter': 'false'
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "package.json" }}
            - dependencies-
            - gnaf
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          command: |
            set +x
            npm install
            ./node_modules/.bin/wait-port -t 600000 localhost:9200
            ./node_modules/.bin/wait-port -t 600000 http://localhost:9200/_cluster/health?wait_for_status=green
            export ES_STARTED=1
            export NPM_CONFIG_PREFIX=$(pwd)/global-npm
            mkdir -p NPM_CONFIG_PREFIX
            export PATH=$PATH:$NPM_CONFIG_PREFIX/bin
            npm run genversion
            npm run cover:cli:nogeo
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: test-results
      - save_cache:
          paths:
            - target/gnaf
          key: gnaf

  test-geo:
    docker:
      - image: circleci/node:12.11.0
      - image: elasticsearch:7.14.2
        environment:
          'discovery.type': 'single-node'
          'bootstrap.system_call_filter': 'false'
    steps:
      - checkout

      - restore_cache:
          keys:
            - dependencies-{{ checksum "package.json" }}
            - dependencies-
            - gnaf
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          command: |
            set +x
            npm install
            ./node_modules/.bin/wait-port -t 600000 localhost:9200
            ./node_modules/.bin/wait-port -t 600000 http://localhost:9200/_cluster/health?wait_for_status=green
            export ES_STARTED=1
            npm run genversion
            npm run cover:nodejs:geo
            npm run cover:rest:geo
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: test-results
      - save_cache:
          paths:
            - target/gnaf
          key: gnaf

  build-and-release:
    docker:
      - image: circleci/node:12.11.0
    steps:
      - queue/until_front_of_line:
          only-on-branch: master
          time: '10'
      - checkout

      - restore_cache:
          keys:
            - dependencies-{{ checksum "package.json" }}
            - dependencies-
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          command: |
            set +x
            git config user.email "tom@windyroad.com.au"
            git config user.name "Tom Howard"
            npm install
            echo "//registry.npmjs.org/:_authToken=$NPM_AUTH" > ~/.npmrc
            # make sure we're the most recent published version + 1
            CURRENT_VERSION=$(npm --unsafe-perm show "@mountainpass/addressr" version)
            npm --unsafe-perm --no-git-tag-version version "${CURRENT_VERSION}" --allow-same-version -m "Version bump to %s."
            if ! git diff --exit-code package.json > /dev/null; then
              # version changed, so commit it
              git add package.json
              NEW_VERSION=$(node -p "require('./package.json').version")
              git commit -m "Version bump to $NEW_VERSION. [skip ci]"
            fi
            npm --unsafe-perm --no-git-tag-version version patch -m "Version bump to %s."
            # now pack and publish
            npm run build:docker
            npm run dopublish
            npm run docker:push
            PUBLISHED_VERSION=$(node -p "require('./package.json').version")
            git tag "v${PUBLISHED_VERSION}"
            # now increment again so we are ready for next time
            npm --unsafe-perm --no-git-tag-version version patch -m "Version bump to %s."
            git add package.json
            NEXT_VERSION=$(node -p "require('./package.json').version")
            git commit -m "Version bump to $NEXT_VERSION. [skip ci]"
            git push origin HEAD:master && git push --tags

workflows:
  version: 2

  ci:
    jobs:
      - deps
      - test:
          requires:
            - deps
      - test-cli:
          requires:
            - deps
      - test-geo:
          requires:
            - deps
      - build-and-release:
          requires:
            - test
            - test-cli
            - test-geo
          filters:
            branches:
              only:
                - master
